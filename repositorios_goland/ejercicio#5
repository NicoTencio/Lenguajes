package main

import (
	"fmt"
	"sort"
)

type producto struct {
	nombre   string
	cantidad int
	precio   int
}
type listaProductos []producto

var lProductos listaProductos

const existenciaMinima int = 10 //la existencia mínima es el número mínimo debajo de el cual se deben tomar eventuales desiciones

func (l *listaProductos) agregarProducto(nombre string, cantidad int, precio int) {
	var result = l.buscarProducto(nombre)
	if result == -1 {
		*l = append(*l, producto{nombre: nombre, cantidad: cantidad, precio: precio})
		fmt.Println("Producto agregado exitosamente")
		fmt.Println("---Actualización de inventario---")
		fmt.Println(lProductos)
		fmt.Println("---------------------------------")
	} else {
		(*l)[result].cantidad += cantidad
		(*l)[result].precio = precio
	}

	// modificar el código para que cuando se agregue un producto, si este ya se encuentra, incrementar la cantidad
	// de elementos del producto y eventualmente el precio si es que es diferente
}

func (l *listaProductos) buscarProducto(nombre string) int { //el retorno es el índice del producto encontrado y -1 si no existe
	var result = -1
	var i int
	for i = 0; i < len(*l); i++ {
		if (*l)[i].nombre == nombre {
			result = i
		}
	}
	return result
}

func (l *listaProductos) venderProducto(nombre string, cant int) {
	var prod = l.buscarProducto(nombre)
	if prod != -1 {
		if (*l)[prod].cantidad-cant >= 0 {
			(*l)[prod].cantidad = (*l)[prod].cantidad - cant
			fmt.Println("Producto comprado exitosamente...")
			fmt.Println("producto: "+(*l)[prod].nombre+"\nCantidad comprada:", cant)
			if (*l)[prod].cantidad == 0 {
				*l = append((*l)[:prod], (*l)[prod+1:]...)
			}

		} else {
			fmt.Println("La cantidad deseada a comprar excede la cantidad existente del producto")
		}
		//modificar para que cuando no haya existencia de cantidad de productos, el producto se elimine de "la lista" y notificar
	}
	fmt.Println("---Actualización de inventario---")
	fmt.Println(lProductos)
	fmt.Println("---------------------------------")
}
func llenarDatos() {
	lProductos.agregarProducto("arroz", 15, 2500)
	lProductos.agregarProducto("frijoles", 4, 2000)
	lProductos.agregarProducto("leche", 8, 1200)
	lProductos.agregarProducto("café", 12, 4500)
}

func (l *listaProductos) listarProductosMinimos() listaProductos {
	var listaProductosMinimo listaProductos
	for i := 0; i < len(*l); i++ {
		if (*l)[i].cantidad <= 10 {
			listaProductosMinimo = append(listaProductosMinimo, (*l)[i])
		}
	}
	// debe retornar una nueva lista con productos con existencia mínima
	return listaProductosMinimo
}

func (l *listaProductos) aumentarInventarioDeMinimos() {
	productosMinimos := lProductos.listarProductosMinimos()
	for _, i := range productosMinimos {
		cantSumar := 10 - i.cantidad
		i.cantidad = cantSumar
		fmt.Println("Se ha actualizado exitosamente el inventario de " + i.nombre)
		l.agregarProducto(i.nombre, i.cantidad, i.precio)
	}
}

func (l *listaProductos) ordenarProductosCantidad() {
	sort.Slice(*l, func(i, j int) bool {
		return (*l)[i].cantidad > (*l)[j].cantidad
	})
	fmt.Println("---ordenación de inventario---")
	fmt.Println(lProductos)
	fmt.Println("---------------------------------")
}

func main() {
	llenarDatos()
	fmt.Println(lProductos)
	lProductos.agregarProducto("arroz", 10, 2200)
	lProductos.venderProducto("leche", 8)
	fmt.Println("-------------listaProductosMinimos-------------")
	fmt.Println(lProductos.listarProductosMinimos())
	fmt.Println("-------------aumentoInventarioMinimos-------------")
	lProductos.aumentarInventarioDeMinimos()
	fmt.Println("-------------ordenarPorCantidad-------------")
	lProductos.ordenarProductosCantidad()

}
